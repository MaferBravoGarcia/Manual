mes<-5
if(mes == 4 | mes== 5 | mes==6){
print("Naciste en primavera")
}else if( mes == 7 | mes== 8 | mes==9){
print("Nacsite en Verano")
}else if(mes == 10 | mes== 11 | mes==12){
print("Naciste en Otoño")
}else if(mes == 1 | mes== 2 | mes==3)
}
mes<-5
if(mes == 4 | mes== 5 | mes==6){
print("Naciste en primavera")
}else if( mes == 7 | mes== 8 | mes==9){
print("Nacsite en Verano")
}else if(mes == 10 | mes== 11 | mes==12){
print("Naciste en Otoño")
}else if(mes == 1 | mes== 2 | mes==3){
print("Naciste en Invierno")
}
mes<-12
if(mes == 4 | mes== 5 | mes==6){
print("Naciste en primavera")
}else if( mes == 7 | mes== 8 | mes==9){
print("Nacsite en Verano")
}else if(mes == 10 | mes== 11 | mes==12){
print("Naciste en Otoño")
}else if(mes == 1 | mes== 2 | mes==3){
print("Naciste en Invierno")
}
mes<-7
if(mes == 4 | mes== 5 | mes==6){
print("Naciste en primavera")
}else if( mes == 7 | mes== 8 | mes==9){
print("Nacsite en Verano")
}else if(mes == 10 | mes== 11 | mes==12){
print("Naciste en Otoño")
}else if(mes == 1 | mes== 2 | mes==3){
print("Naciste en Invierno")
}
mes<-1
if(mes == 4 | mes== 5 | mes==6){
print("Naciste en primavera")
}else if( mes == 7 | mes== 8 | mes==9){
print("Nacsite en Verano")
}else if(mes == 10 | mes== 11 | mes==12){
print("Naciste en Otoño")
}else if(mes == 1 | mes== 2 | mes==3){
print("Naciste en Invierno")
}
mes<-1
if(mes == 4 | mes== 5 | mes==6){
print("Naciste en primavera")
}else if( mes == 7 | mes== 8 | mes==9){
print("Nacsite en Verano")
}else if(mes == 10 | mes== 11 | mes==12){
print("Naciste en Otoño")
}else {
print("Naciste en Invierno")
}
dia<-readline(prompt = "Dime qué día naciste: ")
dia
dia*4
dia<-as.double(dia)
dia
dia*5
Dime
dia<-readline(prompt = "Dime qué día naciste: ")
dia<-as.numeric(dia)
dia
class(dia)
dia<-readline(prompt = "Dime qué día naciste: ")
dia<-as.numeric(dia)
mes<-readline(prompt = "Dime en qé mes naciste (1:12): ")
mes<-as.numeric(mes)
dia
mes
dias<-c(31,28,31,30,31,30,31,31,30,31,30,31)
meses<-c("Enero","Febrero","Marzo","Abril","Mayo","Junio","Julio","Agosto","Septiembre","Octube","Noviembre","Diciembre")
names(dias)<-meses
fias
dias
dia<-readline(prompt = "Dime qué día naciste: ")
dia<-as.numeric(dia)
mes<-readline(prompt = "Dime en qué mes naciste (1:12): ")
mes<-as.numeric(mes)
dias<-c(31,28,31,30,31,30,31,31,30,31,30,31)
if(mes==1){
print(paste("El número de días es ",dia))
}else if(mes==2){
print(paste("El número de días es ", dias[1] + dia))
}else if(mes==3){
print(paste("El número de días es ", sum(dias[1:2]) + dia))
}else if(mes==4){
print(paste("El número de días es ", sum(dias[1:3]) + dia))
}else if(mes==5){
print(paste("El número de días es ", sum(dias[1:4]) + dia))
}else if(mes==6){
print(paste("El número de días es ", sum(dias[1:5]) + dia))
}else if(mes==7){
print(paste("El número de días es ", sum(dias[1:6]) + dia))
}else if(mes==8){
print(paste("El número de días es ", sum(dias[1:7]) + dia))
}else if(mes==9){
print(paste("El número de días es ", sum(dias[1:8]) + dia))
}else if(mes==10){
print(paste("El número de días es ", sum(dias[1:9]) + dia))
}else if(mes==11){
print(paste("El número de días es ", sum(dias[1:10]) + dia))
}else if(mes==12){
print(paste("El número de días es ", sum(dias[1:11]) + dia))
}
dia<-21
mes=1
if(mes==1){
print(paste("El número de días es ",dia))
}else if(mes==2){
print(paste("El número de días es ", dias[1] + dia))
}else if(mes==3){
print(paste("El número de días es ", sum(dias[1:2]) + dia))
}else if(mes==4){
print(paste("El número de días es ", sum(dias[1:3]) + dia))
}else if(mes==5){
print(paste("El número de días es ", sum(dias[1:4]) + dia))
}else if(mes==6){
print(paste("El número de días es ", sum(dias[1:5]) + dia))
}else if(mes==7){
print(paste("El número de días es ", sum(dias[1:6]) + dia))
}else if(mes==8){
print(paste("El número de días es ", sum(dias[1:7]) + dia))
}else if(mes==9){
print(paste("El número de días es ", sum(dias[1:8]) + dia))
}else if(mes==10){
print(paste("El número de días es ", sum(dias[1:9]) + dia))
}else if(mes==11){
print(paste("El número de días es ", sum(dias[1:10]) + dia))
}else if(mes==12){
print(paste("El número de días es ", sum(dias[1:11]) + dia))
}
library(deSolve)
hep <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS<- nu - beta*S*I - epsilon*beta*S*C - mu*S
dI<- beta*S*I + epsilon*beta*S*C - gama*c*I - (1-c)*gama*I - mu*I
dC<- (1-c)*gama*I - mu*C
dR<- gama*I - mu*R
list(c(dS, dI, dR, dC))
})
}
pars <- c(beta= 0.85, c=0.1, epsilon=0.16, gama = 4 , mu=0.01428, nu=0.01428 )
condiciones_iniciales <- c(S =999, I=10, R=0, C=0)
tiempo <- seq(0, 20, by = 0.001)
out <- ode(condiciones_iniciales, tiempo, hep, pars)
head(out)
matplot(out[ , 1], out[ , 2:5], type = "l", xlab = "tiempo", ylab = "Poblaci?n",
main = "Din?mica Hepatitis B", lwd = 2)
legend("topright", c("Susceptible", "Infectado", "Recuperado", "Cr?nico"), col = 1:4,lty=143,cex=0.5)
#nuevas ecuaciones
hepa <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS<- nu - beta*S*I - epsilon*beta*S*C - mu*S
dI<- beta*S*I + epsilon*beta*S*C - gama*c*I - (1-c)*gama*I - mu*I
dC<- (1-c)*gama*I - delta*C - mu*C
dR<- gama*I + delta*C - mu*R
list(c(dS, dI, dR, dC))
})
}
pars <- c(beta= 0.85, c=0.1, epsilon=0.16, gama = 4 , mu=0.01428, nu=0.01428, delta=0.025)
condiciones_iniciales <- c(S =999, I=1, R=0, C=0)
tiempo <- seq(0, 20, by = 0.001)
out <- ode(condiciones_iniciales, tiempo, hepa, pars)
head(out)
matplot(out[ , 1], out[ , 2:5], type = "l", xlab = "tiempo", ylab = "Poblaci?n",
main = "Din?mica Hepatitis B", lwd = 2)
legend("topright", c("Susceptible", "Infectado", "Recuperado", "Cr?nico"), col = 1:4,lty=1:4,cex=0.5)
#beta>gama
pars <- c(beta= 6, c=0.1, epsilon=0.16, gama = 4 , mu=0.01428, nu=0.01428, delta=0.025)
condiciones_iniciales <- c(S =999, I=1, R=0, C=0)
tiempo <- seq(0, 20, by = 0.001)
out <- ode(condiciones_iniciales, tiempo, hepa, pars)
head(out)
matplot(out[ , 1], out[ , 2:5], type = "l", xlab = "tiempo", ylab = "Poblaci?n",
main = "Din?mica Hepatitis B", lwd = 2)
legend("topright", c("Susceptible", "Infectado", "Recuperado", "Cr?nico"), col = 1:4,lty=1:4,cex=0.5)
install.packages(pkgs = "~/Desktop/Tax4Fun2_1.1.5.tar.gz", repos = NULL, source = TRUE)
library(Tax4Fun2)
?buildDependencies()
buildReferenceData(path_to_working_directory = ".", use_force = FALSE, install_suggested_packages = TRUE)
buildReferenceData(path_to_working_directory = ".", use_force = FALSE, install_suggested_packages = TRUE)
buildReferenceData(path_to_working_directory = ".", use_force = FALSE, install_suggested_packages = TRUE)
getwd()
list.files()
buildReferenceData(path_to_working_directory = "~/Downloads/", use_force = FALSE, install_suggested_packages = TRUE)
getwd("~/Downloads/")
setwd("~/Downloads/")
testReferenceData(path_to_reference_data = "Tax4Fun2_ReferenceData_v2")
buildDependencies(path_to_reference_data = "./Tax4Fun2_ReferenceData_v2", install_suggested_packages = TRUE)
getExampleData(path_to_working_directory = ".")
# Option A) Extracting SSU sequences from a single genome
extractSSU(genome_file = "OneProkaryoticGenome.fasta", file_extension = "fasta", path_to_reference_data = "Tax4Fun2_ReferenceData_v2")
# Option B) Extracting SSU sequences from multiple genomes
extractSSU(genome_folder = "MoreProkaryoticGenomes", file_extension = "fasta", path_to_reference_data = "Tax4Fun2_ReferenceData_v2")
# Option A) Assigning function to a single genome
assignFunction(genome_file = "OneProkaryoticGenome.fasta", file_extension = "fasta", path_to_reference_data = "Tax4Fun2_ReferenceData_v2", num_of_threads = 1, fast = T, path_to_diamond_binary_mac = "diamond")
# Option B) Assigning function to multiple genomes
assignFunction(genome_folder = "MoreProkaryoticGenomes/", file_extension = "fasta", path_to_reference_data = "Tax4Fun2_ReferenceData_v2", num_of_threads = 1, fast = T, path_to_diamond_binary_mac = "diamond")
refseq(ps2)
?refsq
?refseq
?refseq()
install.packages(codyn)
install.packages("codyn")
install.packages("RADanalysis")
install.packages(c("aplot", "bit", "bookdown", "boot", "data.table", "datawizard", "epimdr2", "evaluate", "flextable", "ggfun", "ggpubr", "ggrepel", "ggspatial", "ggstance", "graphlayouts", "Hmisc", "insight", "jsonify", "knitr", "lubridate", "markdown", "Matrix", "matrixStats", "mc2d", "modelr", "parameters", "pbapply", "pkgload", "plotly", "plyr", "polspline", "randtoolbox", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rngWELL", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "sf", "sfsmisc", "smacpod", "sp", "spatstat", "spatstat.linnet", "spData", "statsExpressions", "terra", "vctrs", "xaringan", "xfun"))
install.packages(c("aplot", "bit", "bookdown", "boot", "data.table", "datawizard", "epimdr2", "evaluate", "flextable", "ggfun", "ggpubr", "ggrepel", "ggspatial", "ggstance", "graphlayouts", "Hmisc", "insight", "jsonify", "knitr", "lubridate", "markdown", "Matrix", "matrixStats", "mc2d", "modelr", "parameters", "pbapply", "pkgload", "plotly", "plyr", "polspline", "randtoolbox", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rngWELL", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "sf", "sfsmisc", "smacpod", "sp", "spatstat", "spatstat.linnet", "spData", "statsExpressions", "terra", "vctrs", "xaringan", "xfun"))
install.packages(c("aplot", "bit", "bookdown", "boot", "data.table", "datawizard", "epimdr2", "evaluate", "flextable", "ggfun", "ggpubr", "ggrepel", "ggspatial", "ggstance", "graphlayouts", "Hmisc", "insight", "jsonify", "knitr", "lubridate", "markdown", "Matrix", "matrixStats", "mc2d", "modelr", "parameters", "pbapply", "pkgload", "plotly", "plyr", "polspline", "randtoolbox", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rngWELL", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "sf", "sfsmisc", "smacpod", "sp", "spatstat", "spatstat.linnet", "spData", "statsExpressions", "terra", "vctrs", "xaringan", "xfun"))
install.packages(c("aplot", "bit", "bookdown", "boot", "data.table", "datawizard", "epimdr2", "evaluate", "flextable", "ggfun", "ggpubr", "ggrepel", "ggspatial", "ggstance", "graphlayouts", "Hmisc", "insight", "jsonify", "knitr", "lubridate", "markdown", "Matrix", "matrixStats", "mc2d", "modelr", "parameters", "pbapply", "pkgload", "plotly", "plyr", "polspline", "randtoolbox", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rngWELL", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "sf", "sfsmisc", "smacpod", "sp", "spatstat", "spatstat.linnet", "spData", "statsExpressions", "terra", "vctrs", "xaringan", "xfun"))
install.packages(c("aplot", "ggspatial", "graphlayouts", "insight", "mc2d", "modelr", "parameters", "pbapply", "pkgload", "plotly", "plyr", "polspline", "randtoolbox", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rngWELL", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "sf", "sfsmisc", "smacpod", "sp", "spatstat", "spatstat.linnet", "spData", "statsExpressions", "terra", "vctrs", "xaringan", "xfun"))
install.packages(c("aplot", "ggspatial", "graphlayouts", "insight", "mc2d", "modelr", "parameters", "pbapply", "pkgload", "plotly", "plyr", "polspline", "randtoolbox", "RcppArmadillo", "RcppEigen", "rgdal", "rmarkdown", "rngWELL", "roxygen2", "RSQLite", "rstatix", "s2", "sass", "sf", "sfsmisc", "smacpod", "sp", "spatstat", "spatstat.linnet", "spData", "statsExpressions", "terra", "vctrs", "xaringan", "xfun"))
4*8
3^3 + (8-10^2) - (25/sqrt(25))^2
1/(3^-3) + (8-10^2) - (25/sqrt(25))^2
1 < 5
log(20) < sqrt(4)
v = c(1:5)
v}
v
f = c(3:10)
f
which(v==f)
v == f
f = c(3:8)
v == f
f = c(3:7)
v == f
v
f
v != f
which(f == v)
c[3:5]
v
f
v[3] == f[1]
v
f
v[3] == f[2]
v == f
v[1:5] == f[1:5]
1 + 2*3 + 3 + 15/3
4 - 15/3 + 3^2 + 3*sqrt(81)
1/3^-1
3/1^-1
(-2)^2
(2)^2
x<- "La candente mañana de febrero en que Beatriz Viterbo murió, después de una imperiosa agonía que no se rebajó un solo instante ni al sentimentalismo ni al miedo"
x
x <- la candente
?class
x <- 1
class(x)
x <- 1:3
class(x)
type
?c()
s <- (1:5)
length(s)
x<-c
x[c(1,3,5,7)]
x <- c("Hola", "Bien", "cómo", "¡", "estás", ":(", "?")
x[c(1,3,5,7)]
#Se define el vector "x"
x <- c("Hola", "Bien", "cómo", "!", "estás", ":(", "?")
#Se indica dentro de un vector que se seleccionen las posiciones 1, 3, 5 y 7 del vector "x".
x[c(1,3,5,7)]
x[c("Hola","!")]
x<-c(1,2,3,5,8,13,21)
x[c(2, 7, 4)]
x[c("1","3")]
x<-c(1,2,3,5,8,13,21)
x[c(2, 7, 4)]
#Se define el vector "x"
x <- c("Hola", "Bien", "cómo", "!", "estás", ":(", "?")
#Se indica dentro de un vector que se seleccionen las posiciones 1, 3, 5 y 7 del vector "x".
x[c(1,3,5,7)]
#Se define el vector "x"
x <- c(1,2,3,5,8,13,21)
x[-4]
#Se define el vector "x"
x <- c(1,2,3,5,8,13,21)
#Dentro del corchete indicamos la posición que se quiere omitir
x[-4]
#Se define el vector "x"
x <- c(1,2,3,5,8,13,21)
#Dentro del corchete indicamos la posición que se quiere omitir
x[-4]
#Cuando se quiere omitir un conjunto de posiciones, se definen dentro de un vector
x[-c(2, 7, 4)]   # Todos menos el segundo , séptimo y cuarto elemento
x<-c(1,2,3,5,8,13,21)
x[-6]
x     # Estoy intacto
x <- c(1,2,3,5,8,13,21)
x[-6]
x     # Estoy intacto
#Se define el vector "x"
x <- c(88,5,12,13)
#
x <- c(x[1:3],168,x[4])
x
x<-c()
x                 # Soy un vector vacío :(
x[1]<- 2
x[2:5]<-c(56,78,90,12)
x                 # Ahora ya no :)
#Repite 5 veces el valor "3" y asignalo a la variable "x".
x<-rep(3,5)
x
y<-rep(c(1,2,3,5),3)
y
x<-c(1,2,3,4)
y<-rep(x,each=2)
y
x <- 1:15
any(x > 7.5)
all(x> sqrt(100))
x<-c(1,2,3)
y<-c(4,5,6)
x + y
x-y
x*x
y*y
x*y
3*x                #Multiplicación por escalar: término a término
sqrt(2)*y          # Sí, por cualquier escalar!
3*x + sqrt(2)*y    # Operaciones más complejas
x<-c(1,2,3)
y<-c(4,5,6)
x + y
x-y
x*x
y*y
x*y
x/y
3*x                #Multiplicación por escalar: término a término
sqrt(2)*y          # Sí, por cualquier escalar!
3*x + sqrt(2)*y    # Operaciones más complejas
x<-c(1,2,3)
y<-c(4,5,6)
x + y
x-y
x*x
y*y
x*y
x/y
sqrt(x)
3*x                #Multiplicación por escalar: término a término
sqrt(2)*y          # Sí, por cualquier escalar!
3*x + sqrt(2)*y    # Operaciones más complejas
x<-c(1,2,3)
y<-c(4,5,6)
x + y
x-y
x*x
y*y
x*y
x/y
sqrt(x)
x^2
3*x                #Multiplicación por escalar: término a término
sqrt(2)*y          # Sí, por cualquier escalar!
3*x + sqrt(2)*y    # Operaciones más complejas
x * x
x * y
x ** y
x ** y
y ^ 2
x + y
x + 2
x / y
y / 5
log(x)
z = c(1:10)
z
sum(z)
#Respuesta muy larga
(1+2+3+4+5+6+7+8+9+10)/10
#Se define el vector que incluye valores del 1 al 1000
x<-rnorm(1000)
min(x) #
max(x)
range(x)
sum(x)
mean(x)
median(x)
sd(x)
quantile(x)
#Se define el vector que incluye valores del 1 al 1000
x<-rnorm(1000)
min(x) #
max(x)
range(x)
sum(x)
mean(x)
median(x)
sd(x)
quantile(x)
#Se define el vector que incluye valores del 1 al 1000
x<-rnorm(1000)
x
min(x) #
max(x)
range(x)
sum(x)
mean(x)
median(x)
sd(x)
quantile(x)
x<- c(rep(3,5),1:15,rep(c(1,2,3),5))
unique(x)
x<-sample(10,10)
x
sort(x)
x<- rnorm(10000)
hist(x,col="tomato2") #Histograma
plot(x,col="salmon")
boxplot(x,col="wheat")
edades <- c(35,35,70,17,14) #Definimos un vector llamado "edades"
nombres <- c("Jerry","Beth","Rick", "Summer","Morty") #Definimos un vector llamado "edades", del mismo tamaño que "edades"
names(edades) <- nombres #Se nombran los elementos del vector "edades"
nombres
edades <- c(35,35,70,17,14) #Definimos un vector llamado "edades"
nombres <- c("Jerry","Beth","Rick", "Summer","Morty") #Definimos un vector llamado "edades", del mismo tamaño que "edades"
names(edades) <- nombres #Se nombran los elementos del vector "edades"
edades
Ahora veamos un ejemplo más "biológico"
genomeSizeM_BP<-c(3234.83,2716.97,143.73,0.014281,12.1)
genomeSizeM_BP*1e6
organismo<-c("Human","Mouse","Fruit Fly","Roundworm","Yeast")
names(genomeSizeM_BP)<- organismo
genomeSizeM_BP
y <- matrix(c(1,5,8,-4), nrow=2, ncol=2) #nrow: indica el número de renglones & ncol: indica el número de columnas.
y
y[1,2]
y[1,]
ventas <- data.frame(
mes = c("enero", "febrero", "marzo", "abril"),
productos_vendidos = c(10, 15, 20, 25),
ingresos = c(100, 150, 200, 250)
)
ventas <- data.frame(
mes = c("enero", "febrero", "marzo", "abril"),
productos_vendidos = c(10, 15, 20, 25),
ingresos = c(100, 150, 200, 250)
)
print(ventas)
dna_data[2, "secuencia"]
ventas <- data.frame(
mes = c("enero", "febrero", "marzo", "abril"),
productos_vendidos = c(10, 15, 20, 25),
ingresos = c(100, 150, 200, 250)
)
dna_data <- data.frame(
secuencia = c("ATCGATCG", "GCTAGCTA", "TTAAGGCT"),
tamaño = c(8, 8, 8),
contenido_GC = c(0.5, 0.4, 0.3)
)
dna_data[2, "secuencia"]
ventas <- data.frame(
mes = c("enero", "febrero", "marzo", "abril"),
productos_vendidos = c(10, 15, 20, 25),
ingresos = c(100, 150, 200, 250)
)
dna_data <- data.frame(
secuencia = c("ATCGATCG", "GCTAGCTA", "TTAAGGCT"),
tamaño = c(8, 8, 8),
contenido_GC = c(0.5, 0.4, 0.3)
)
print(dna_data)
dna_data[1:2, c("tamaño", "contenido_GC")]
complement <- function(sequence) {
complementary_nucleotides <- c("T", "A", "G", "C")
complement_sequence <- gsub(
pattern = paste(complementary_nucleotides, collapse = "|"),
replacement = complementary_nucleotides,
x = sequence,
ignore.case = TRUE
)
return(complement_sequence)
}
# Original DNA sequences
original_sequences <- c("ATCGATCG", "GCTAGCTA", "TTAAGGCT")
# Finding the complementary chains
complementary_sequences <- lapply(original_sequences, complement)
complement <- function(sequence) {
complementary_nucleotides <- c("T", "A", "G", "C")
complement_sequence <- gsub(
pattern = paste(complementary_nucleotides, collapse = "|"),
replacement = complementary_nucleotides,
x = sequence,
ignore.case = TRUE
)
return(complement_sequence)
}
# Original DNA sequences
original_sequences <- c("ATCGATCG", "GCTAGCTA", "TTAAGGCT")
# Finding the complementary chains
complementary_sequences <- lapply(original_sequences, complement)
original_sequences <- c("ATCGATCG", "GCTAGCTA", "TTAAGGCT")
complementary_sequences <- lapply(original_sequences, complement)
complement("ATCGATCG")
complement(ATCGATCG)
complement("ATCGATCG")
install.packages("bookdown")
bookdown::render_book('index.Rmd', 'bookdown::pdf_book')
